//Estructura BackUp
struct Backup{
	/* Argumentos del kernel */
	int* a;
	int* b;
	. . .
	int* n;
	int* resultados;
	/* Variables locales */
	int temp1[id_block];
	int temp2[id_block];
	. . .
	int tempn[id_block];
	/* Último punto de control */
	int estado[id_block];

};

//Función kernel modificada

__global__ void kernelFuncition(int* a,.., int* resultados, Backup* backup, 
										int* quantum_expirado, int* estado)
	/* Creación de variables */
	int temp1;
	. . .
	int tempn;
	
	/* Inicializar variables con respecto al backup */
	switch(backup.estado[id_block]){
		case INICIO:
			//Inicialización de variables
			backup.temp1[id_block] = tempn = 0;
			. . .
			backup.tempn[id_block] = tempn = 0;
			break;
		case EJECUCION:
			//Inicialización de variables
			tempn = backup.tempn[id_block];
			. . .
			resultados = backup.resultados[id_block];
			break;
		case TERMINADO:
			break;
	
	switch(backup.estado[id_block]){
		case INICIO:
			estado[id_block] = EJECUCION;
			break;
		case EJECUCION:
			//Ejecución del kernel
			while(!quantum_expirado && !completo){
				//Procesa 
				resultados = paso_de_procesamiento;
			}
			/* Si se realizó la ejecución completamente */
			if(completo){
				estado[id_block] = TERMINADO;
				break;
			}
			/* Si ya expiró el quantum */
			//Almacena contexto en backup
			backup.tempn[id_block] = tempn;
			. . .
			backup.resultados[id_block] = resultados;
			break;
		case TERMINADO:
			break;
	}

//Algoritmo del lado del CPU

/* Creación e inicialización del backup del kernel a ejecutar*/
Backup* backup;
backup.a = a;
. . .
backup.n = n;
backup.resultados = resultados;
. . .
estado = INICIO;
for (int i = 0; i < gridDim; i++){
	backup.estado[i] = estado;
}
quantum_time = //duración del quantum
quantum_expirado = false;


/* Ejecución del kernel */
while(!completo){
	kernelFuncition<<<blockDim,gridDim >>>(a,.., resultados, backup,
												quantum_expirado, estado);
	/*Espera el tiempo del quantum */
	usleep(quantum_time);
	*quantum_expirado = true;

	/* Si aun no están completos todos los threads */
	if(!todos_threads_terminados){
		*quantum_expirado = false;
	}
}





